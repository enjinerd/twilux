// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	comments "twilux/business/comments"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepoInterface is an autogenerated mock type for the CommentRepoInterface type
type CommentRepoInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: domain, ctx
func (_m *CommentRepoInterface) Create(domain comments.Domain, ctx context.Context) (comments.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(comments.Domain, context.Context) comments.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: domain, ctx
func (_m *CommentRepoInterface) Delete(domain comments.Domain, ctx context.Context) (comments.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(comments.Domain, context.Context) comments.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: snippetId, ctx
func (_m *CommentRepoInterface) GetAll(snippetId string, ctx context.Context) ([]comments.Domain, error) {
	ret := _m.Called(snippetId, ctx)

	var r0 []comments.Domain
	if rf, ok := ret.Get(0).(func(string, context.Context) []comments.Domain); ok {
		r0 = rf(snippetId, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(snippetId, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields: username, ctx
func (_m *CommentRepoInterface) GetAllUser(username string, ctx context.Context) ([]comments.Domain, error) {
	ret := _m.Called(username, ctx)

	var r0 []comments.Domain
	if rf, ok := ret.Get(0).(func(string, context.Context) []comments.Domain); ok {
		r0 = rf(username, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, context.Context) error); ok {
		r1 = rf(username, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: domain, ctx
func (_m *CommentRepoInterface) Update(domain comments.Domain, ctx context.Context) (comments.Domain, error) {
	ret := _m.Called(domain, ctx)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(comments.Domain, context.Context) comments.Domain); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(comments.Domain, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
